/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.codeInsight.hints

import com.intellij.codeInsight.hints.ChangeListener
import com.intellij.codeInsight.hints.ImmediateConfigurable
import com.intellij.codeInsight.hints.config.InlayHintsConfigurable
import com.intellij.ui.components.JBCheckBox
import com.intellij.ui.layout.panel
import org.jetbrains.kotlin.idea.KotlinBundle
import javax.swing.JComponent


typealias CompatibleInlayHintsConfigurable = InlayHintsConfigurable

fun createLambdaHintsImmediateConfigurable(settings: KotlinLambdasHintsProvider.Settings): ImmediateConfigurable {
    return object : ImmediateConfigurable {

        private val returnExprField = JBCheckBox(KotlinBundle.message("hints.settings.lambda.return"), settings.returnExpressions)

        private val receiversAndParamsField = JBCheckBox(
            KotlinBundle.message("hints.settings.lambda.receivers.parameters"),
            settings.implicitReceiversAndParams
        )

        override fun createComponent(listener: ChangeListener): JComponent {
            returnExprField.isSelected = settings.returnExpressions
            returnExprField.addActionListener { settings.returnExpressions = returnExprField.isSelected }

            receiversAndParamsField.isSelected = settings.implicitReceiversAndParams
            receiversAndParamsField.addActionListener { settings.implicitReceiversAndParams = receiversAndParamsField.isSelected }

            return panel {
                row { returnExprField(pushX) }
                row { receiversAndParamsField(pushX) }
            }
        }
    }
}

fun createTypeHintsImmediateConfigurable(settings: KotlinReferencesTypeHintsProvider.Settings): ImmediateConfigurable {
    return object : ImmediateConfigurable {

        private val propertyTypeField = JBCheckBox(KotlinBundle.message("hints.settings.types.property"), settings.propertyType)
        private val variableTypeField = JBCheckBox(KotlinBundle.message("hints.settings.types.variable"), settings.localVariableType)
        private val funReturnTypeField = JBCheckBox(KotlinBundle.message("hints.settings.types.return"), settings.functionReturnType)
        private val paramTypeField = JBCheckBox(KotlinBundle.message("hints.settings.types.parameter"), settings.parameterType)

        override fun createComponent(listener: ChangeListener): JComponent {
            propertyTypeField.isSelected = settings.propertyType
            propertyTypeField.addActionListener { settings.propertyType = propertyTypeField.isSelected }

            variableTypeField.isSelected = settings.localVariableType
            variableTypeField.addActionListener { settings.localVariableType = variableTypeField.isSelected }

            funReturnTypeField.isSelected = settings.functionReturnType
            funReturnTypeField.addActionListener { settings.functionReturnType = funReturnTypeField.isSelected }

            paramTypeField.isSelected = settings.parameterType
            paramTypeField.addActionListener { settings.parameterType = paramTypeField.isSelected }

            return panel {
                row { propertyTypeField(pushX) }
                row { variableTypeField(pushX) }
                row { funReturnTypeField(pushX) }
                row { paramTypeField(pushX) }
            }
        }
    }
}